import * as Print from 'expo-print';
import * as Sharing from 'expo-sharing';
import * as FileSystem from 'expo-file-system';


export const generatePDF = async (filter, data,userName='Dummy',setIsLoading) => {
  console.log('data', data);
  console.log('filter', filter);
setIsLoading(true);
  // Separate frozen and non-frozen products
  const nonFrozenProducts = data.filter((item) => !item.frozen);
  const frozenProducts = data.filter((item) => item.frozen);

  // Sorting logic based on filter
  const applySort = (arr, field, order) => {
    if (order === 'none') return arr; // Do nothing if "none" is specified
    return arr.sort((a, b) => {
      if (order === 'asc') {
        return a[field] > b[field] ? 1 : -1;
      } else if (order === 'desc') {
        return a[field] < b[field] ? 1 : -1;
      }
    });
  };

  // Apply filters on non-frozen products
  const sortedNonFrozenProducts = applySort(
    applySort(
      applySort(
        applySort(nonFrozenProducts, 'name', filter.productName),
        'availableStock', filter.availableStockOrder
      ),
      'reorderQuantity', filter.reorderQuantity
    ),
    'reorderLevel', filter.reorderLevel
  );

  // Apply filters on frozen products
  const sortedFrozenProducts = applySort(
    applySort(
      applySort(
        applySort(frozenProducts, 'name', filter.productName),
        'availableStock', filter.availableStockOrder
      ),
      'reorderQuantity', filter.reorderQuantity
    ),
    'reorderLevel', filter.reorderLevel
  );

  // Get current date and time to create a unique file name
  const currentDate = new Date();
  const formattedDate = `${currentDate.getFullYear()}-${(
    currentDate.getMonth() + 1
  )
    .toString()
    .padStart(2, '0')}-${currentDate.getDate().toString().padStart(2, '0')}`;
  const formattedTime = `${currentDate.getHours().toString().padStart(2, '0')}-${currentDate.getMinutes()
    .toString()
    .padStart(2, '0')}-${currentDate.getSeconds().toString().padStart(2, '0')}`;
  const fileName = `${formattedDate}-${formattedTime}-${userName}-Report.pdf`;

  // Create report content for non-frozen products
  const nonFrozenContent = sortedNonFrozenProducts
    .map((product) => {
      return `
        <tr>
          <td>${product.name}</td>
          <td>${product.availableStock}</td>
          <td>${product.reorderLevel}</td>
          <td>${product.reorderQuantity}</td>
        </tr>`;
    })
    .join('');

  // Create report content for frozen products
  const frozenContent = sortedFrozenProducts
    .map((product) => {
      return `
        <tr>
          <td>${product.name}</td>
          <td>${product.availableStock}</td>
          <td>${product.reorderLevel}</td>
          <td>${product.reorderQuantity}</td>
        </tr>`;
    })
    .join('');

  // Create the final report content including frozen and non-frozen sections
  const reportContent = `
    <style>
      table {
        width: 100%;
        border-collapse: collapse;
      }
      th, td {
        padding: 8px;
        text-align: left;
        border-bottom: 1px solid #ddd;
      }
      th {
        background-color: #4CAF50;
        color: white;
      }
      tr:nth-child(even) {
        background-color: #f2f2f2;
      }
    </style>

    <h1>Stock Report</h1>

    <table>
      <tr>
        <th>Product Name</th>
        <th>Available Stock</th>
        <th>Reorder Level</th>
        <th>Reorder Quantity</th>
      </tr>
      ${nonFrozenContent}
    </table>

    <h2>Frozen Products</h2>
    <table>
      <tr>
        <th>Product Name</th>
        <th>Available Stock</th>
        <th>Reorder Level</th>
        <th>Reorder Quantity</th>
      </tr>
      ${frozenContent}
    </table>

    <footer>
      <p>Date: ${formattedDate} ${formattedTime} - Generated by ${userName}</p>
    </footer>
  `;

  // Generate PDF using expo-print
  const { uri } = await Print.printToFileAsync({
    html: reportContent,
    base64: false,
  });

  // Rename the file using expo-file-system
  const newUri = `${FileSystem.documentDirectory}${fileName}`;
  await FileSystem.moveAsync({
    from: uri,
    to: newUri,
  });

  // Share the PDF using expo-sharing
  if (await Sharing.isAvailableAsync()) {
    await Sharing.shareAsync(newUri);
  } else {
    console.log('Sharing is not available on this platform.');
  }
  setIsLoading(false);
};
